
public class JvmComprehension {

    public static void main(String[] args) {
        int i = 1;                      // 1
        Object o = new Object();        // 2
        Integer ii = 2;                 // 3
        printAll(o, i, ii);             // 4
        System.out.println("finished"); // 7
    }

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;                   // 5
        System.out.println(o.toString() + i + ii);  // 6
    }
}

// Строка 1:
//JVM загружает класс JvmComprehension с помощью загрузчика классов.
//В области метапространства создается метаданные для класса, включая его поля и методы.
//В области кучи создается экземпляр класса.


//Строка 2:
//В области кучи создается объект o типа Object.


//Строка 3:
//В области кучи создается объект-оболочка ii типа Integer, содержащий значение 2.


//Строка 4:
//Создается фрейм стека для метода main.
//В фрейм стека помещаются локальные переменные i, o и ii.


//Строка 5:
//В области кучи создается объект-оболочка uselessVar типа Integer, содержащий значение 700.


//Строка 6:
//Вычисляется выражение o.toString() + i + ii.
//Результат выводится в консоль.


//Строка 7:
//Удаляется фрейм стека для метода main.
//Локальные переменные i, o и ii становятся недоступными.


//Сборщик мусора:
//Сборщик мусора отслеживает объекты, на которые больше нет ссылок.
//Объекты o, ii и uselessVar будут помечены как доступные для сборки мусора, поскольку на них больше нет ссылок.
//Сборщик мусора удалит эти объекты из области кучи, освободив память.


//Области памяти:
//Метапространство: Содержит метаданные для классов, включая их поля и методы.
//Куча: Содержит объекты, созданные во время выполнения программы.
//Стек: Содержит фреймы стека для методов, которые в данный момент выполняются.


//ClassLoader'ы:
//Загрузчики классов отвечают за загрузку классов в JVM.
//В данном случае используется загрузчик классов по умолчанию, который загружает классы из пути к классам.


//Фреймы стека:
//Фреймы стека создаются для каждого метода, который вызывается.
//Они содержат локальные переменные, параметры метода и ссылку на вызывающий фрейм стека.